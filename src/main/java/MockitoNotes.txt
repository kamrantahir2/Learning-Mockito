
This lesson follows the guide found at - https://www.tutorialspoint.com/mockito/mockito_environment.htm

Mocking- A way to test the functionality of a program or class in isolation
       - No database, properties file or file server needed
       - A mock object returns dummy data corresponding to dummy input pass through

 =============================================================

            Mockito - Adding Behaviour
                ---------------

- Mockito adds a functionality to a mock object using the methods when().

 {

    //add the behavior of calc service to add two numbers
    when(calcService.add(10.0,20.0)).thenReturn(30.00);
    Here we've instructed Mockito to give a behavior of adding 10 and 20 to the add method of calcService and as a result, to return the value of 30.00.

    At this point of time, Mock recorded the behavior and is a working mock object.

    //add the behavior of calc service to add two numbers
    when(calcService.add(10.0,20.0)).thenReturn(30.00);

  }

===================================================================

            Mockito - Verifying Behaviour
                ---------------------

 - Mockito can ensure whether a mock method is being called with required arguments or not. It is done using the verify() method.

 {

   //test the add functionality
   Assert.assertEquals(calcService.add(10.0, 20.0),30.0,0);

   //verify call to calcService is made or not with same arguments.
   verify(calcService).add(10.0, 20.0);

 }

 ===================================================================

             Mockito - Expecting Calls
                 ---------------------

 - Mockito provides a special check on the number of calls that can be made on a particular method. Suppose MathApplication should call the CalculatorService.serviceUsed() method only once, then it should not be able to call CalculatorService.serviceUsed() more than once.

    {

        //add the behavior of calc service to add two numbers
        when(calcService.add(10.0,20.0)).thenReturn(30.00);

        //limit the method call to 1, no less and no more calls are allowed
        verify(calcService, times(1)).add(10.0, 20.0);


    }


 ===================================================================

             Mockito - Varying Calls
              ---------------------

- Mockito provides the following additional methods to vary the expected call counts.

  atLeast (int min) − expects min calls.

  atLeastOnce () − expects at least one call.

  atMost (int max) − expects max calls.

 ===================================================================

               Mockito - Exception Handling
                ---------------------

Mockito provides the capability for a mock to throw exceptions, so exception handling can be tested. Take a look at the following code snippet.

{

        //add the behavior to throw exception
        doThrow(new Runtime Exception("divide operation not implemented"))
           .when(calcService).add(10.0,20.0);

}

Here we've added an exception clause to a mock object. MathApplication makes use of calcService using its add method and the mock throws a RuntimeException whenever calcService.add() method is invoked.

 ===================================================================

               Mockito - Create Mock
                -------------------

So far, we've used annotations to create mocks. Mockito provides various methods to create mock objects. mock() creates mocks without bothering about the order of method calls that the mock is going to make in due course of its action.

    - calcService = mock(CalculatorService.class);

 ===================================================================

               Mockito - Ordered Verification
                    -------------------

Mockito provides Inorder class which takes care of the order of method calls that the mock is going to make in due course of its action.

Makes sure the methods are called in order. In the code below the add method will be called first then the subtract will be called

  {

        //create an inOrder verifier for a single mock
        InOrder inOrder = inOrder(calcService);

        //following will make sure that add is first called then subtract is called.
        inOrder.verify(calcService).add(20.0,10.0);
        inOrder.verify(calcService).subtract(20.0,10.0);

  }

   ===================================================================

                 Mockito - Callbacks
                    --------------

Mockito provides an Answer interface which allows stubbing with generic interface.

    {

            //add the behavior to add numbers
            when(calcService.add(20.0,10.0)).thenAnswer(new Answer<Double>() {
               @Override
               public Double answer(InvocationOnMock invocation) throws Throwable {
                  //get the arguments passed to mock
                  Object[] args = invocation.getArguments();
                  //get the mock
                  Object mock = invocation.getMock();
                  //return the result
                  return 30.0;
               }
            });

    }